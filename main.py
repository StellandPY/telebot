from glob import glob
import telebot
import sqlite3
from telebot import types
import time
import datetime
from random import randint
import requests
import json
#–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Https
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

token = '1318922261:AAG4ae3IVRamnNG89VHNLX4gfZa-XI4zEtA'
bot = telebot.TeleBot(token)

conn = sqlite3.connect('stellbet.db', check_same_thread=False)
cursor = conn.cursor()


try:
    cursor.execute('''CREATE TABLE users
                    (ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL , User_ID integer, akt_date date, cls_date date, phone text, active text)
                    ''')
    cursor.execute('''CREATE TABLE static
                        (plus text, minus text)
                        ''')
    cursor.execute('''CREATE TABLE qiwi_pay
                            (ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL , User_ID integer, phone TEXT, sum INTEGER, code INTEGER)
                            ''')
except sqlite3.OperationalError:
    pass


@bot.message_handler(commands=['start'])
def start(message):
    date = datetime.date.today()

    act = 'false'

    us_id = str(message.from_user.id)
    args = int(us_id)
    cursor.execute(""" SELECT User_ID FROM users WHERE User_ID = ? """, [args])
    row = cursor.fetchone()

    if row == None:
        cursor.execute('insert into users (User_id, active) values (?, ?)', (args, act))
        #cursor.execute('insert into qiwi_pay (User_id) values (?)', [args])
        print(cursor.execute('select * from users').fetchall())
        conn.commit()
        bot.send_message(message.chat.id, '<b>–ü—Ä–∏–≤–µ—Ç!</b> \U0001F603 ' + '\n<i>–õ—é–±–∏—à—å</i>' + '<b> —Ö–∞–ª—è–≤—É</b> ?' + '\U0001F60F \n<i>–õ—é–±–∏—à—å</i>' + '<b> —Å—Ç—Ä–∏–º—ã</b> ?' + '\U0001F60D \n'
                                          '<i>–¢–æ–≥–¥–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —Ä–∞–∑–Ω—ã–µ –ø–∏–Ω-–∫–æ–¥–∏–∫–∏ –¥–ª—è –∏–≥—Ä—ã</i>' + '<b> Warface</b>!\n' 
                                          '<i>–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø—É:</i>' + '<b> –ü–æ–º–æ—â—å</b>. \U0001F60F \U0001F60D', parse_mode='HTML', reply_markup=keyboard())
    else:
        bot.send_message(message.chat.id, '<b>–ü—Ä–∏–≤–µ—Ç!</b> \U0001F603 ' + '\n<i>–õ—é–±–∏—à—å</i>' + '<b> —Ö–∞–ª—è–≤—É</b> ?' + '\U0001F60F \n<i>–õ—é–±–∏—à—å</i>' + '<b> —Å—Ç—Ä–∏–º—ã</b> ?' + '\U0001F60D \n'
                                          '<i>–¢–æ–≥–¥–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —Ä–∞–∑–Ω—ã–µ –ø–∏–Ω-–∫–æ–¥–∏–∫–∏ –¥–ª—è –∏–≥—Ä—ã</i>' + '<b> Warface</b>!\n'
                                          '<i>–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø—É:</i>' + '<b> –ü–æ–º–æ—â—å</b>. \U0001F60F \U0001F60D', parse_mode='HTML', reply_markup=keyboard())


@bot.message_handler(commands=['admin'])
def admins(message):
    admin_id = '342646669'
    us_id = str(message.from_user.id)

    if us_id == admin_id:
        bot.send_message(message.from_user.id, '–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!', reply_markup=key_admin())
    else:
        print('Error')


@bot.message_handler(commands=['vip'])
def vip(message):
    check = cursor.execute(f"SELECT active FROM users WHERE User_ID={message.chat.id}").fetchone()[0]

    if check == 'false':
        phone = cursor.execute(f"SELECT phone FROM users WHERE User_ID={message.chat.id}").fetchone()[0]



        date = datetime.date.today()

        us_id = str(message.from_user.id)
        phone = str('+' + phone)
        sum = 5
        random_code = randint(100000, 999999)
        cursor.execute("""INSERT into qiwi_pay (User_id, phone, sum, code) VALUES (?,?,?,?)""", (us_id, phone, sum, random_code))
        conn.commit()

        #–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        markup_inline = types.InlineKeyboardMarkup()
        btn_1 = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='check')
        btn_2 = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='exit')
        markup_inline.add(btn_1, btn_2)

        bot.send_message(message.chat.id, '–°—á—ë—Ç\n\n–û–ø–ª–∞—Ç–∞ –ø–æ–ø–∏—Å–∫–∏ –Ω–∞ —Å—É–º–º—É: 5—Ä\n–î–∞—Ç–∞ :' + str(date) + '\n–°—Ç–∞—Ç—É—Å: –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'
                                          '\n\n–û–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç –ø–æ –Ω–∏–∫–Ω–µ–π–º—É QIWI: STELLAND. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É '
                                          '–æ—Å—Ç–∞–≤—å—Ç–µ: ' + str(random_code), reply_markup=markup_inline)
    elif check == 'true':
        bot.send_message(message.chat.id, '–£ –í–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!', reply_markup=keyboard())


@bot.callback_query_handler(func=lambda call: True)
def result(call):
    if call.data == 'check':
        a = cursor.execute(f"SELECT * FROM qiwi_pay WHERE user_id = {call.message.chat.id}").fetchone()

        if a == None:
            bot.send_message(call.message.chat.id, '–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.', reply_markup=keyboard())

        else:
            try:
                QIWI_TOKEN = 'bbd47d1910aafe32757e56fddee2fe61'
                QIWI_ACCOUNT = '+79094023102'

                s = requests.Session()
                s.headers['authorization'] = 'Bearer ' + QIWI_TOKEN
                parameters = {'rows': '50'}
                h = s.get('https://edge.qiwi.com/payment-history/v1/persons/' + QIWI_ACCOUNT + '/payments', params=parameters,
                          verify=False)
                req = json.loads(h.text)
                print(req['data'][0])

                try:
                    phone = cursor.execute(f"""SELECT phone FROM qiwi_pay WHERE user_id = {call.message.chat.id}""").fetchone()[0]
                    random_code = cursor.execute(f"""SELECT code FROM qiwi_pay WHERE user_id = {call.message.chat.id}""").fetchone()[0]
                    sum = cursor.execute(f"""SELECT sum FROM qiwi_pay WHERE user_id = {call.message.chat.id}""").fetchone()[0]

                    # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è —Ü–∏–∫–ª–æ–º –ø–æ —Å–ª–æ–≤–∞—Ä—é
                    for i in range(len(req['data'])):
                        if req['data'][i]['account'] == phone:
                            if req['data'][i]['comment'] == str(random_code):
                                if req['data'][i]['sum']['amount'] == sum:
                                    cursor.execute(f"DELETE FROM qiwi_pay WHERE user_id = {call.message.chat.id}")
                                    cursor.execute(f"""UPDATE users set active='true' WHERE User_id={call.message.chat.id}""")
                                    conn.commit()
                                    bot.edit_message_text(chat_id=call.message.chat.id,
                                                          message_id=call.message.message_id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏"
                                                          " –ø–æ–¥–ø–∏—Å–∫—É!", parse_mode='Markdown')
                                    bot.send_message(call.message.chat.id,
                                                     '–£–¥–∞—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫!', reply_markup=keyboard())
                except:
                    bot.send_message(call.message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É')
            except:
                bot.send_message(call.message.chat.id, '–ü—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ Qiwi.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ –ø–æ–∑–∂–µ.')

    elif call.data == 'exit':
        a = cursor.execute(f"SELECT * FROM qiwi_pay WHERE user_id = {call.message.chat.id}").fetchone()
        if a == None:
            bot.send_message(call.message.chat.id, '–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.', reply_markup=keyboard())
        else:
            a = cursor.execute(f"DELETE FROM qiwi_pay WHERE user_id = {call.message.chat.id}").fetchone()
            conn.commit()
            bot.send_message(call.message.chat.id, '–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω.', reply_markup=keyboard())


@bot.message_handler(content_types=['contact'])
def phone(message):
    if message.contact is not None:
        phone = message.contact.phone_number
        a = cursor.execute(f'SELECT phone FROM users WHERE User_ID={message.chat.id}').fetchone()[0]
        print(a)

        if a == None:
            cursor.execute(f"""UPDATE users set phone={phone} WHERE User_id={message.chat.id}""")
            conn.commit()
            bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª—å!', reply_markup=keyboard())
        else:
            bot.send_message(message.chat.id, '–£ –í–∞—Å —É–∂–µ –≤–≤–µ–¥—ë—Ç –Ω–æ–º–µ—Ä –≤ –ø—Ä–æ—Ñ–∏–ª–µ!', reply_markup=keyboard())




@bot.message_handler(content_types=["text"])
def text(message):
    admin_id = 342646669

    #–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–¥
    us_id = str(message.from_user.id)
    args = int(us_id)
    cursor.execute("""SELECT User_ID FROM users WHERE User_ID = ? """, [args])
    row = cursor.fetchone()

    text = message.text

    if row == None:
        print('Error')
    else:
        if text == "ü•á –ü—Ä–æ–≥–Ω–æ–∑—ã ü•á":
            #–í—ã—å—Ä–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö
            lists = glob('images/*')

            bot.send_message(message.chat.id, 'FREE', reply_markup=keyboard())

            for i in lists:
                bot.send_photo(message.chat.id, photo=open(i, 'rb'))

        elif text == 'üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üéØ':

            cursor.execute("""SELECT count(*) from static WHERE plus=1""")
            row = cursor.fetchall()[0]
            stat_plus = row[0]
            conn.commit()

            cursor.execute("""SELECT count(*) from static WHERE minus=2""")
            row = cursor.fetchall()[0]
            stat_minus = row[0]
            conn.commit()

            bot.send_message(message.chat.id, '–í–æ—Ç –Ω–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: \n–ü–ª—é—Å—ã:'
                                              ' ' + str(stat_plus) + '\n–ú–∏–Ω—É—Å—ã: ' + str(stat_minus),
                             reply_markup=keyboard())

        elif text == 'üõ† –ü–æ–º–æ—â—å üõ†':
            bot.send_message(message.chat.id, '–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É \U0001F64F', reply_markup=keyboard())

        elif text == 'üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ üí∏':
            bot.send_message(message.chat.id, '–¢–£–¢ –ö–ê–†–¢–´ –ò –¢–î', reply_markup=keyboard())

        elif text == 'üèÜ –ü—Ä–æ–≥–Ω–æ–∑—ã ViP üèÜ':
            a = cursor.execute(f'SELECT phone FROM users WHERE User_ID={message.chat.id}').fetchone()[0]
            if a == None:
                markup_request = types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                    types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è', request_contact=True)
                ).add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
                bot.send_message(message.chat.id, '–£ –í–∞—Å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ :( \n–•–æ—Ç–∏—Ç–µ –µ—ë –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å?\n'
                                                  '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–º —Å–≤–æ–π –Ω–æ–º–µ—Ä!',
                                                   reply_markup=markup_request)
            else:
                try:
                    us_id = message.from_user.id
                    cursor.execute("""SELECT active FROM users WHERE User_id = ?""", [us_id])
                    row = cursor.fetchone()[0]

                    if row == 'true':
                        # –í—ã—å—Ä–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö
                        lists = glob('vip/*')

                        bot.send_message(message.chat.id, 'VIP', reply_markup=keyboard())

                        for i in lists:
                            bot.send_photo(message.chat.id, photo=open(i, 'rb'))
                    else:
                        bot.send_message(message.chat.id, '–£ –í–∞—Å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ :( \n–•–æ—Ç–∏—Ç–µ –µ—ë –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å?\n'
                                                          '–ü–∏—à–∏—Ç–µ: /vip')

                except:
                    print('Error')

        elif text == '–û—Ç–º–µ–Ω–∞':
            bot.send_message(message.chat.id, 'üôÉ', reply_markup=keyboard())

        #-----------------------------------------------------------------------------------
        #–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        elif text == '‚ûï –°—Ç–∞–≤–∫–∏ ‚ûï' and args == admin_id:
            sent = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø–ª—é—Å–æ–≤')
            bot.register_next_step_handler(sent, plus)
        elif text == '‚ûñ –°—Ç–∞–≤–∫–∏ ‚ûñ' and args == admin_id:
            sent = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Å–æ–≤')
            bot.register_next_step_handler(sent, minus)
        elif text == '‚ùå –û—á–∏—Å—Ç–∏—Ç—å ‚ùå' and args == admin_id:
            sent = bot.send_message(message.from_user.id, '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏?',
                                    reply_markup=key_yesno())
            bot.register_next_step_handler(sent, delete_stat)
        elif text == 'üìç –í—ã–π—Ç–∏ üìç':
            bot.send_message(message.chat.id, '–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ', reply_markup=keyboard())
        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –ø–æ–Ω—è–ª —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å :(', reply_markup=keyboard())



def plus(message):
    try:
        text = int(message.text)
        plus = 1

        for i in range(text):
            cursor.execute('insert into static (plus) values (?)', ([plus]))
        conn.commit()
        bot.send_message(message.from_user.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ ' + str(text) + ' —É—Å–ø–µ—à–Ω—ã—Ö —Å—Ç–∞–≤–∫–∏! :)',
                         reply_markup=key_admin())
    except:
        bot.send_message(message.from_user.id, '–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ :(')


def minus(message):
    try:
        text = int(message.text)
        minus = 2

        for i in range(text):
            cursor.execute('insert into static (minus) values (?)', ([minus]))
        conn.commit()
        bot.send_message(message.from_user.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ ' + str(text) + ' –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Å—Ç–∞–≤–∫–∏! :(',
                         reply_markup=key_admin())
    except:
        bot.send_message(message.from_user.id, '–í—ã–≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ :(')


def delete_stat(message):
    text = message.text
    if text == '–î–∞':
        cursor.execute('''DELETE FROM static''')
        conn.commit()
        bot.send_message(message.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!', reply_markup=key_admin())
    else:
        bot.send_message(message.from_user.id, '–•–æ—Ä–æ—à–æ —á—Ç–æ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ :)', reply_markup=key_admin())


#–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def keyboard():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn_a1 = types.KeyboardButton('ü•á –ü—Ä–æ–≥–Ω–æ–∑—ã ü•á')
    btn_b1 = types.KeyboardButton('üèÜ –ü—Ä–æ–≥–Ω–æ–∑—ã ViP üèÜ')
    btn_2 = types.KeyboardButton('üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üéØ')
    btn_3 = types.KeyboardButton('üõ† –ü–æ–º–æ—â—å üõ†')
    btn_4 = types.KeyboardButton('üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ üí∏')
    markup.add(btn_a1, btn_b1)
    markup.add(btn_2, btn_3)
    markup.add(btn_4)
    return markup


def key_admin():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn_1 = types.KeyboardButton('‚ûï –°—Ç–∞–≤–∫–∏ ‚ûï')
    btn_2 = types.KeyboardButton('‚ûñ –°—Ç–∞–≤–∫–∏ ‚ûñ')
    btn_3 = types.KeyboardButton('‚ùå –û—á–∏—Å—Ç–∏—Ç—å ‚ùå')
    btn_4 = types.KeyboardButton('üìç –í—ã–π—Ç–∏ üìç')
    markup.add(btn_1, btn_2)
    markup.add(btn_3)
    markup.add(btn_4)
    return markup


def key_yesno():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn_1 = types.KeyboardButton('–î–∞')
    btn_2 = types.KeyboardButton('–ù–µ—Ç')
    markup.add(btn_1, btn_2)
    return markup


while True:
    try:
        bot.polling(none_stop=True, timeout=123, interval=0)

    except Exception as E:
        print(E.args)
        time.sleep(2)
